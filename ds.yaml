apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: vpn
spec:
  selector:
    matchLabels:
      app: vpn
  template:
    metadata:
      labels:
        app: vpn
    spec:
      containers:
      - command:
        - sleep
        - infinity
        env:
        - name: NUM_PING
          value: "10"
        - name: MAX_LOSSES
          value: "3"
        - name: SEG_START
          value: "200"
        - name: SEG_END
          value: "213"
        - name: STATUS_FILE
          value: "/status/failing"
        image: image-registry.openshift-image-registry.svc:5000/twingate/infra-check
        imagePullPolicy: Always
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - ./network-check.sh
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 30
        name: check
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /status
          name: status
      - command:
        - /bin/sh
        - -c
        - trap "twingate report" EXIT;twingate setup --headless /secret/credentials.json;
          twingate start; while [ true ]; do sleep 60;if [ -f "STATUS_FILE" ];then exit 1;fi;done
        env:
        - name: STATUS_FILE
          value: "/status/failing"
        image: image-registry.openshift-image-registry.svc:5000/twingate/twingate:latest
        imagePullPolicy: IfNotPresent
        name: vpn
        resources: {}
        securityContext:
          privileged: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: /secret
          name: credentials
        volumeMounts:
        - mountPath: /status
          name: status
      dnsPolicy: ClusterFirst
      hostNetwork: true
      nodeSelector:
        node-role.kubernetes.io/worker: ""
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      serviceAccount: vpn
      serviceAccountName: vpn
      terminationGracePeriodSeconds: 30
      volumes:
      - name: credentials
        secret:
          defaultMode: 420
          secretName: credentials
      - name: status
        emptyDir: {}
  updateStrategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
